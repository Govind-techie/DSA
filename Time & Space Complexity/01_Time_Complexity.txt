Time Complexity : Time complexity is a measure of the amount of time an algorithm takes to run as a function of the input size, describing its efficiency.

Note : Its not the actual time taken to execute a program.
Note: As the input size of a function increases, the time complexity of it increases.


Example Time Complexity : O(n) 

O(n) means the time taken by the algorithm increases linearly with the size of the input (n). If the input size doubles, the time taken
roughly doubles too.

Example : 

Iterating through an array of size n :


for (int i = 0; i < n; i++) {
    cout << arr[i] << endl;  (One operation per element)
}

Graph of O(n)

The graph of O(n) is a straight line starting from the origin (0, 0), with time growing linearly as input size (n) increases.

Time (Operations)
  ^
  |
10|                                        *
  |                                     *
  |                                  *
  |                               *
  |                            *
  |                         *
  |                      *
  |                   *
  |                *
  |             *
  |          *
  |       *
  |    *
  | *
  +---------------------------------------------------> Input Size (n) (As input size increases graph increases with a linear fashion)
      1    2    3    4    5    6    7    8    9   10

Key Points:
	•	X-axis: Input size (n)
	•	Y-axis: Time (or number of operations)
	•	Slope: Represents the linear growth of time as n increases.
